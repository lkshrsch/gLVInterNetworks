for ( i in 1:length(igraph::E(network))){
'if(c(interaction_pars)[i]!=0){
E(network)[i]$label = c(interaction_pars)[i]
}'
if (c(interaction_pars)[i]<0){
igraph::E(network)[i]$lty=2
}
if ( c(interaction_pars)[i]>0){
igraph::E(network)[i]$lty=1
}
if(  abs(c(interaction_pars)[i]) > 0){
igraph::E(network)[i]$width <- 4* abs( interaction_pars[i]/min(interaction_pars)  )
}
if(verbose){
igraph::E(network)[i]$label <- round(c(interaction_pars)[i],2)
}
}
#vertex attributes:
relative_abundances = colMeans(observations)[-1]
#igraph::V(network)$label = as.character(1:(length(igraph::V(network))))
if(substrate){
#substrate
igraph::V(network)[1]$color="white"
igraph::V(network)[1]$label="S"
igraph::V(network)[-1]$label = as.character(1:(length(igraph::V(network))-1))
igraph::V(network)[1]$size = mean(relative_abundances)/vsize
#label
' for(i in 2:ncol(parms_matrix)){
V(network)[i]$label = as.character(i )
}'
}
for (i in 1:length(igraph::V(network))){
igraph::V(network)[i]$label = colnames(observations[,-1])
if (linear_pars[i]<0){
igraph::V(network)[i]$color="red"
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
if (linear_pars[i]>0){igraph::V(network)[i]$color="blue"}
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
return(network)
}
plotGraph(data)
plotGraph(data)
g <- generate_interaction_network(data$Parms, data$obs)
g <- generate_interaction_network(data$Parms, data$obs, verbose = FALSE)
g <- generate_interaction_network(data$Parms, data$obs,vsize=0.1, verbose = FALSE)
draw_interaction_network(g)
generate_interaction_network <-
function(parms_matrix, observations, substrate=FALSE, vsize, verbose ){
#require(igraph)
rownames(parms_matrix)<-as.character(1:nrow(parms_matrix))
n <- ncol(observations[,-1])
interaction_pars <- parms_matrix[,-1]
linear_pars <- parms_matrix[,1]
#transpose interaction matrix! Arrow points in the direction a specie actually influence another!
interaction_pars <- round(interaction_pars,3)  # round parameters for sparse representation
network <- igraph::graph.adjacency(adjmatrix = t(interaction_pars),mode = "directed",weighted = TRUE, add.colnames = TRUE)
#edge attributes:
#make list of parameters to match list of edges (removing all 0 coefficients = not existing edges)
interaction_pars <- interaction_pars[ ! interaction_pars %in% 0]
for ( i in 1:length(igraph::E(network))){
'if(c(interaction_pars)[i]!=0){
E(network)[i]$label = c(interaction_pars)[i]
}'
if (c(interaction_pars)[i]<0){
igraph::E(network)[i]$lty=2
}
if ( c(interaction_pars)[i]>0){
igraph::E(network)[i]$lty=1
}
if(  abs(c(interaction_pars)[i]) > 0){
igraph::E(network)[i]$width <- 4* abs( interaction_pars[i]/min(interaction_pars)  )
}
if(verbose){
igraph::E(network)[i]$label <- round(c(interaction_pars)[i],2)
}
}
#vertex attributes:
relative_abundances = colMeans(observations)[-1]
#igraph::V(network)$label = as.character(1:(length(igraph::V(network))))
if(substrate){
#substrate
igraph::V(network)[1]$color="white"
igraph::V(network)[1]$label="S"
igraph::V(network)[-1]$label = as.character(1:(length(igraph::V(network))-1))
igraph::V(network)[1]$size = mean(relative_abundances)/vsize
#label
' for(i in 2:ncol(parms_matrix)){
V(network)[i]$label = as.character(i )
}'
}
for (i in 1:length(igraph::V(network))){
igraph::V(network)[i]$label = colnames(observations[,-1])[i]
if (linear_pars[i]<0){
igraph::V(network)[i]$color="red"
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
if (linear_pars[i]>0){igraph::V(network)[i]$color="blue"}
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
return(network)
}
g <- generate_interaction_network(data$Parms, data$obs,vsize=0.1, verbose = FALSE)
draw_interaction_network(g)
plotGraph(data)
generate_interaction_network <-
function(parms_matrix, observations, substrate=FALSE, vsize=0.1, verbose=FALSE ){
#require(igraph)
rownames(parms_matrix)<-as.character(1:nrow(parms_matrix))
n <- ncol(observations[,-1])
interaction_pars <- parms_matrix[,-1]
linear_pars <- parms_matrix[,1]
#transpose interaction matrix! Arrow points in the direction a specie actually influence another!
interaction_pars <- round(interaction_pars,3)  # round parameters for sparse representation
network <- igraph::graph.adjacency(adjmatrix = t(interaction_pars),mode = "directed",weighted = TRUE, add.colnames = TRUE)
#edge attributes:
#make list of parameters to match list of edges (removing all 0 coefficients = not existing edges)
interaction_pars <- interaction_pars[ ! interaction_pars %in% 0]
for ( i in 1:length(igraph::E(network))){
'if(c(interaction_pars)[i]!=0){
E(network)[i]$label = c(interaction_pars)[i]
}'
if (c(interaction_pars)[i]<0){
igraph::E(network)[i]$lty=2
}
if ( c(interaction_pars)[i]>0){
igraph::E(network)[i]$lty=1
}
if(  abs(c(interaction_pars)[i]) > 0){
igraph::E(network)[i]$width <- 4* abs( interaction_pars[i]/min(interaction_pars)  )
}
if(verbose){
igraph::E(network)[i]$label <- round(c(interaction_pars)[i],2)
}
}
#vertex attributes:
relative_abundances = colMeans(observations)[-1]
#igraph::V(network)$label = as.character(1:(length(igraph::V(network))))
if(substrate){
#substrate
igraph::V(network)[1]$color="white"
igraph::V(network)[1]$label="S"
igraph::V(network)[-1]$label = as.character(1:(length(igraph::V(network))-1))
igraph::V(network)[1]$size = mean(relative_abundances)/vsize
#label
' for(i in 2:ncol(parms_matrix)){
V(network)[i]$label = as.character(i )
}'
}
for (i in 1:length(igraph::V(network))){
igraph::V(network)[i]$label = colnames(observations[,-1])[i]
if (linear_pars[i]<0){
igraph::V(network)[i]$color="red"
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
if (linear_pars[i]>0){igraph::V(network)[i]$color="blue"}
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
return(network)
}
plotGraph(data)
g <- generate_interaction_network(data$Parms, data$obs,vsize=0.1, verbose = FALSE)
draw_interaction_network(g)
generate_interaction_network <-
function(parms_matrix, observations, substrate=FALSE, vsize=0.1, verbose=FALSE, keepNames=FALSE ){
#require(igraph)
rownames(parms_matrix)<-as.character(1:nrow(parms_matrix))
n <- ncol(observations[,-1])
interaction_pars <- parms_matrix[,-1]
linear_pars <- parms_matrix[,1]
#transpose interaction matrix! Arrow points in the direction a specie actually influence another!
interaction_pars <- round(interaction_pars,3)  # round parameters for sparse representation
network <- igraph::graph.adjacency(adjmatrix = t(interaction_pars),mode = "directed",weighted = TRUE, add.colnames = TRUE)
#edge attributes:
#make list of parameters to match list of edges (removing all 0 coefficients = not existing edges)
interaction_pars <- interaction_pars[ ! interaction_pars %in% 0]
for ( i in 1:length(igraph::E(network))){
'if(c(interaction_pars)[i]!=0){
E(network)[i]$label = c(interaction_pars)[i]
}'
if (c(interaction_pars)[i]<0){
igraph::E(network)[i]$lty=2
}
if ( c(interaction_pars)[i]>0){
igraph::E(network)[i]$lty=1
}
if(  abs(c(interaction_pars)[i]) > 0){
igraph::E(network)[i]$width <- 4* abs( interaction_pars[i]/min(interaction_pars)  )
}
if(verbose){
igraph::E(network)[i]$label <- round(c(interaction_pars)[i],2)
}
}
#vertex attributes:
relative_abundances = colMeans(observations)[-1]
if(!keepNames){
igraph::V(network)$label = as.character(1:(length(igraph::V(network))))
}
if(substrate){
#substrate
igraph::V(network)[1]$color="white"
igraph::V(network)[1]$label="S"
igraph::V(network)[-1]$label = as.character(1:(length(igraph::V(network))-1))
igraph::V(network)[1]$size = mean(relative_abundances)/vsize
#label
' for(i in 2:ncol(parms_matrix)){
V(network)[i]$label = as.character(i )
}'
}
for (i in 1:length(igraph::V(network))){
if(keepNames){
igraph::V(network)[i]$label = colnames(observations[,-1])[i]
}
if (linear_pars[i]<0){
igraph::V(network)[i]$color="red"
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
if (linear_pars[i]>0){igraph::V(network)[i]$color="blue"}
igraph::V(network)[i]$size = (relative_abundances[i]/min(relative_abundances))/vsize # normalize to avoid negative values .  Vertex size should represent relative abundance of species... not linear parameter.. linear parameter maybe as extra line coming from nowhere (ecosystem)
}
return(network)
}
g <- generate_interaction_network(data$Parms, data$obs,vsize=0.1, verbose = FALSE, keepNames = T)
draw_interaction_network(g)
plotGraph <-
function(x, vsize = 0.1, main = NULL, verbose = FALSE, keepNames = FALSE, ...){
if(class(x) == "real_data"){return("Can't draw an interaction network of real data..! Provide inference results")}
draw_interaction_network(generate_interaction_network(x$Parms, observations = x$obs, vsize = vsize, verbose = verbose, keepNames = keepNames ), main = main)
}
plotGraph(data)
plotGraph(data, keepNames = T)
plotGraph(data, keepNames = T, verbose = T)
?plotGraph
?linear_Regression
?sensitivityAnalysis
devtools::install_github("lkshrsch/iniflowcyts")
devtools::install_github("lkshrsch/iniflowcyts")
devtools::install_github("lkshrsch/iniflowcyts")
devtools::install_github("lkshrsch/iniflowcyts")
devtools::install_github("lkshrsch/gLVInterNetworks")
library(gLVInterNetworks)
data <- generate_data(2,2,6,0.1,0)
plot(data)
ident <- sensitivityAnalysis(data$Parms)
summary(ident)
summary(ident$sens)
print(ident$coll[,"N" == length(data$Parms)])
print(ident$coll[ident$coll[,"N" == length(data$Parms)],])
ident$coll[,"N" == length(data$Parms)]
length(data$Parms)
ident$coll
ident$coll[ident$coll[,"N"]==length(data$Parms),]
remove.packages("gLVInterNetworks", lib="~/R/R-3.2.2/library")
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks")
library(gLVInterNetworks)
library(gLVInterNetworks)
data <- gLVgenerateData(2, 2, 5, 0.01, 0)
plot(data, legend = T)
lr <- gLVlinearRegression(data)
plot(lr)
plot(lr, type="l")
points(data)
plotGraph(lr)
plotGraph(lr, verbose = T)
nlr <- gLVnonlinearRegression(data)
plot(nlr, type="l")
nlr <- gLVnonlinearRegression(data, parms0 = lr$Parms)
plot(nlr, type="l")
points(data)
nlr$Parms
plotGraph(nlr)
plotGraph(nlr, verbose =T)
nlr$SSR
data$noise
sd(nlr$Fit$residuals)
id <- sensitivityAnalysis(nlr$Parms)
summary(id$sens)
id$coll
1/440
sd(nlr$Fit$residuals)
data <- gLVgenerateData(3, 3, 9, 0.001, 0)
plot(data)
nlr <- gLVnonlinearRegression(data)
nlr$message
lr <- gLVlinearRegression(data)
lr <- gLVlinearRegression(data, regularization = T, alpha = 0)
lr
lr <- gLVlinearRegression(data)
lr$Parms
lr$SSR
plot(lr, type="l")
nlr <- gLVnonlinearRegression(data, parms0 = lr$Parms)
nlr$message
sd(nlr$Fit$residuals)
plot(nlr, type="l")
points(data)
data$noise
id <- sensitivityAnalysis(nlr$Parms)
id$coll
id$coll[,"N"]==12
id$coll[id$coll[,"N"]==12,]
1/406
sd(nlr$Fit$residuals)
nlr$Parms
data$Parms
data$noise
save(data, file = "dataset_example_optimalFit_SDerror_collin.Rd")
getwd()
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/iniflowcyts")
data(data)
data("data")
data(iniflowcyts)
library(iniflowcyts)
data("data")
plot(data)
data("nlr")
devtools::install_github("lkshrsch/gLVInterNetworks")
library(gLVInterNetworks)
remove.packages("iniflowcyts", lib="~/R/R-3.2.2/library")
library(gLVInterNetworks)
data("exampleData2")
data("nlrData2")
nlr$Parms
plot(nlr, type="l")
points(data)
library(gLVInterNetworks)
data("exampleData2")
data("nlrData2")
exampleData2 <- data
nlrData2 <- nlr
rm(nlr)
rm(data)
plot(exampleData2)
save(exampleData2, file = "gLVInterNetworks/data/exampleData2.RData")
save(nlrData2, file = "gLVInterNetworks/data/nlrData2.RData")
devtools::install_github("lkshrsch/gLVInterNetworks")
R --version
data("exampleData2")
names(exampleData2)
devtools::install_github("lkshrsch/gLVInterNetworks")
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE, force=TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
browseVignettes(package = "gLVInterNetworks")
sessionInfo()
colors()
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
ronaldo = 491/681
messi = 476/573
ronaldo = ronaldo + 55/120
ronaldo = 491/681
55/120
55/113
messi = (476+55)/(573+113)
ronaldo = (491+55)/(681+120)
messi > ronaldo
messi
ronaldo
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
fpath <- system.file("rawdata", "example1.csv", package="gLVInterNetworks")
fpath
df <- read.csv2(file = fpath, header = TRUE)
library("gLVInterNetworks", lib.loc="~/R/R-3.2.2/library")
exampleData1 <- gLVgenerateData(2, 2, 6, 0.5, 0)
plot(exampleData1)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.5, 0)
plot(exampleData1)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.5, 0)
plot(exampleData1)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.5, 0)
plot(exampleData1)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.3, 0)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.1, 0)
plot(exampleData1)
exampleData1$Parms
exampleData1 <- gLVgenerateData(2, 2, 6, 0.1, 0)
plot(exampleData1)
exampleData1 <- gLVgenerateData(2, 2, 6, 0.1, 0)
plot(exampleData1)
exampleData1$Parms
exampleData1 <- gLVgenerateData(2, 2, 6, 0.1, 0)
plot(exampleData1)
exampleData1$Parms
lrData1 <- gLVlinearRegression(exampleData1)
plot(lrData1)
lrData1$Parms
nlrData1 <- gLVnonlinearRegression(exampleData1)
plot(nlrData1)
nlrData1$message
nlrData1 <- gLVnonlinearRegression(exampleData1)
nlrData1$message
plot(nlrData1)
plot(nlrData1, type="l")
points(exampleData1)
nlrData1$residual_SD
sensitivityAnalysis(nlrData1)
data <- exampleData1
rm(data)
sensitivityAnalysis <-
function(Parms, inputData){
data <- inputData
sF <- FME::sensFun(func = solveLV_Sens_bio, parms = Parms)
coll <- FME::collin(sF)
return(list("sens" = sF, "coll" = coll))
}
sensitivityAnalysis(nlrData1$Parms, inputData = exampleData1$obs)
sensitivityAnalysis(nlrData1$Parms, inputData = exampleData1)
sensitivityAnalysis <-
function(Parms, inputData){
data <<- inputData
sF <- FME::sensFun(func = solveLV_Sens_bio, parms = Parms)
coll <- FME::collin(sF)
return(list("sens" = sF, "coll" = coll))
}
sensitivityAnalysis(nlrData1$Parms, inputData = exampleData1)
sensitivityAnalysis <-
function(Parms){
sF <- FME::sensFun(func = solveLV_Sens_bio, parms = Parms)
coll <- FME::collin(sF)
return(list("sens" = sF, "coll" = coll))
}
data <- exampleData1
sensitivityAnalysis(nlrData1$Parms)
id <- sensitivityAnalysis(nlrData1$Parms)
id$coll[nrow(id$coll),]
1/472699
getwd()
setwd("gLVInterNetworks/data/")
save(exampleData1, file = "exampleData1.RData")
save(lrData1, file = "lrData1.RData")
save(nlrData1, file = "nlrData1.RData")
data("nlrData2")
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
rm(sensitivityAnalysis())
rm(sensitivityAnalysis
)
library(gLVInterNetworks)
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
data("exampleData2")
data <- exampleData2
ident <- sensitivityAnalysis(Parms = nlrData2$Parms)
tail(ident$coll)
ident$coll[ident$coll[,"N"]==42,]
ident$coll[ident$coll[,"N"]==42,"collinearity"]
data <- exampleData2
ident <- sensitivityAnalysis(Parms = nlrData2$Parms)
summary(ident$sens)
s <- summary(ident$sens)
order(s$L2)
s[order(s$L2),]
sSens <- summary(ident$sens)
print(sSens)
sSens[order(sSens$L2, decreasing = TRUE),]
sSens[order(sSens$L2, decreasing = TRUE),c("value","L2")]
a <- sSens[order(sSens$L2, decreasing = TRUE),c("value","L2")]
a[,1]
rownames(a)
a <- summary(nlrData2)
a
summary(nlrData2)[order(summary(nlrData2)$StdErr),]
summary(nlrData2)[order(summary(nlrData2)[,"StdErr"],]
summary(nlrData2)[order(summary(nlrData2)["StdErr"],]
summary(nlrData2)[order(summary(nlrData2)[,2],]
summary(nlrData2)[,2]
summary(nlrData2)[order(summary(nlrData2)[,2]),]
order(summary(nlrData2)[,2])
summary(nlrData2)
summary(nlrData2)[order(summary(nlrData2)[,2]),]
summary(nlrData2)[order(summary(nlrData2)[,4]),]
order(summary(nlrData2)[,4])
summary(nlrData2)[order(summary(nlrData2)[,4]),]
summary(nlrData2)
s <- summary(nlrData2)
s <- summary(nlrData2)
s$p.value
s <- as.matrix(summary(nlrData2))
s
s <- summary(nlrData2)
s[order(s[,4]),]
s <- cbind(1:42,summary(nlrData2))
s[order(s[,5]),]
order(s[,5])
order(s[,5])[1:10]
order(s[,5])
rownames(sSens[order(sSens$L2, decreasing = TRUE),c("value","L2")])
b <- rownames(sSens[order(sSens$L2, decreasing = TRUE),c("value","L2")])
a <- order(s[,5])
b <- as.numeric(b)
b
a
a[1:10] %in% b[1:10]
a[1:15] %in% b[1:15]
sum(a[1:15] %in% b[1:15])
sum(a[1:20] %in% b[1:20])
sum(a[1:12] %in% b[1:12])
sum(a[1:10] %in% b[1:10])
which(a[1:10] %in% b[1:10])
a
a[1:10]
a[1:10][c(2,3,4,5,6,8,9,10)]
