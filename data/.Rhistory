best[[2]]$parms0
best[[3]]$parms0
best[[1]]$Parms
best[[2]]$Parms
best[[3]]$Parms
sssr
ssrs
max(ssrs)
min(ssrs)
which(min(ssrs))
which(ssrs == min(ssrs))
best[[which(ssrs == min(ssrs))]]$SSR
iterations <- 10
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs
differentSolutions <- length(unique(round(ssrs,5)))
differentSolutions
length(unique(round(ssrs,1)))
unique(round(ssrs,1))
unique(round(ssrs,2))
unique(round(ssrs,7))
length(unique(round(ssrs,7)))
length(unique(round(ssrs,5)))
length(unique(round(ssrs,4)))
length(unique(round(ssrs,3)))
length(unique(round(ssrs,2)))
for ( i in 1:10){ p[[i]] <- best[[i]]$Parms}
p <- list()
for ( i in 1:10){ p[[i]] <- best[[i]]$Parms}
p
round(p, 3)
round(best[[1]]$Parms,3)
for ( i in 1:10){ p[[i]] <- round(best[[i]]$Parms,3)}
p
unique(p)
which(p == unique(p))
p
ssrs
for ( i in 1:10){ p[[i]] <- round(best[[i]]$Parms,2)}
p
unique(p)
ssrs
round(ssrs,2)
sort(round(ssrs,2))
p
unique(p)
ssrs
unique(round(ssrs,5))
which(ssrs == unique(round(ssrs, 5)))
which(ssrs = unique(round(ssrs, 5)))
unique(round(ssrs, 5))
differentSolutions <- length(unique(round(ssrs,5)))
differentSolutions
min(ssrs)
plot(ssrs)
hist(ssrs)
plot(ssrs)
p[c(4,5,9)]
i
structures
i
structures$ub[10,]
i = 2
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
length(unique(round(ssrs,5)))
length(unique(round(ssrs,3)))
length(unique(round(ssrs,2)))
length(unique(round(ssrs,1)))
ssrs
round(ssrs,1)
length(unique(round(ssrs,1)))
unique(round(ssrs,1))
unique(round(ssrs,3))
for ( i in 1:10){ d[[i]] <- round(best[[i]]$residual_SD,8)}
d <- list()
for ( i in 1:10){ d[[i]] <- round(best[[i]]$residual_SD,8)}
d
unique(round(d,5))
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
d[j] <- nlr$residual_SD
for ( i in 1:10){ p[[i]] <- round(best[[i]]$Parms,2)}
}
data
best <- list()
ssrs <- c()
iterations
i
i = 2
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
d[j] <- nlr$residual_SD
for ( i in 1:10){ p[[i]] <- round(best[[i]]$Parms,2)}
}
length(best)
i
i=1
i=2
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
d[j] <- nlr$residual_SD
for ( l in 1:10){ p[[l]] <- round(best[[l]]$Parms,2)}
}
l
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
d[j] <- nlr$residual_SD
}
best
length(best)
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
d[j] <- nlr$residual_SD
}
ssrs
for ( l in 1:10){ p[[l]] <- round(best[[l]]$Parms,2)}
length(unique(round(ssrs,5)))
plot(ssrs)
p
length(unique(round(ssrs,4)))
length(unique(round(ssrs,3)))
length(unique(round(ssrs,2)))
round(ssrs, 3)
round(ssrs, 4)
round(ssrs, 3)
p
ssrs
unique(ssrs, 3)
unique(round(ssrs, 3))
differentSolutions <- length(unique(round(ssrs,3)))
differentSolutions
ssrs <- round(ssrs,3)
ssrs
differentSolutions <- length(unique(ssrs))
differentSolutions
length(ssrs == min(ssrs))
min(ssrs)
ssrs == min(ssrs)
numberOptimalSolution <- sum(ssrs == min(ssrs))
numberOptimalSolution
d
compareStructures <- function(data, structures, verbose=FALSE, iterations = 1){
if(class(data)=="matrix"){
obs <- data
data <- list("obs"=obs, "noise"="?")
}
# error check that data is in right format. Convert to right format
result <- list()
for(i in 1:nrow(structures$lb)){
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[which(ssrs == min(ssrs))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
if(nlr$message != "Solution of model failed. Overshot"){
result[[i]] <- nlr
}
if(verbose){print(i)}
}
#--------------------------------------------
if(!is.null(data$Parms)){
# if in silico data, convert to structure
structure <- c(sign(data$Parms))
structure[structure %in% 1] <- "+"
structure[structure %in% -1] <- "-"
structure <- paste0(structure, collapse = "")
}else{
# else:
structure = "Unknown"
}
ssr <- matrix(nrow = (length(result)+1), ncol = 4)
for(i in 1:(nrow(ssr)-1)){
ssr[i,1] <- i
try(ssr[i,2] <- round(result[[i]]$SSR,3), silent = T)
ssr[i,3] <- paste0(structures$bounds[i,],collapse = "")
ssr[i,4] <- round(sd(result[[i]]$Fit$residuals),3)
}
ssr[nrow(ssr),1:4] <- c("Original", 0 , structure, data$noise)
result_final <- as.data.frame(ssr[order(as.numeric(ssr[,2])),])
colnames(result_final) <- c("Index", "SSR","Network","SD")
return(list("networks"=result_final,"runs"=result))
}
s
r <- compareStructures(data, structures = s, verbose = TRUE, iterations = 4)
if(class(data)=="matrix"){
obs <- data
data <- list("obs"=obs, "noise"="?")
}
iterations <- 4
result <- list()
for(i in 1:nrow(structures$lb)){
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[which(ssrs == min(ssrs))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
if(nlr$message != "Solution of model failed. Overshot"){
result[[i]] <- nlr
}
if(verbose){print(i)}
}
nrow(structures$lb)
i =1
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
nlr$message
best
ssrs
nlr
i = 2
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[which(ssrs == min(ssrs))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
nlr$Parms
nlr$SSR
nlr$iterations
nlr$differentSolutions
nlr$numberOptimalSolutions
i=1
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[which(ssrs == min(ssrs))]]
min(ssrs)
which(ssrs == min(ssrs))
nlr <- best[[min(which(ssrs == min(ssrs)))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
if(nlr$message != "Solution of model failed. Overshot"){
result[[i]] <- nlr
}
compareStructures <- function(data, structures, verbose=FALSE, iterations = 1){
if(class(data)=="matrix"){
obs <- data
data <- list("obs"=obs, "noise"="?")
}
# error check that data is in right format. Convert to right format
result <- list()
for(i in 1:nrow(structures$lb)){
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[min(which(ssrs == min(ssrs)))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
if(nlr$message != "Solution of model failed. Overshot"){
result[[i]] <- nlr
}
if(verbose){print(i)}
}
#--------------------------------------------
if(!is.null(data$Parms)){
# if in silico data, convert to structure
structure <- c(sign(data$Parms))
structure[structure %in% 1] <- "+"
structure[structure %in% -1] <- "-"
structure <- paste0(structure, collapse = "")
}else{
# else:
structure = "Unknown"
}
ssr <- matrix(nrow = (length(result)+1), ncol = 4)
for(i in 1:(nrow(ssr)-1)){
ssr[i,1] <- i
try(ssr[i,2] <- round(result[[i]]$SSR,3), silent = T)
ssr[i,3] <- paste0(structures$bounds[i,],collapse = "")
ssr[i,4] <- round(sd(result[[i]]$Fit$residuals),3)
}
ssr[nrow(ssr),1:4] <- c("Original", 0 , structure, data$noise)
result_final <- as.data.frame(ssr[order(as.numeric(ssr[,2])),])
colnames(result_final) <- c("Index", "SSR","Network","SD")
return(list("networks"=result_final,"runs"=result))
}
s
data
r <- compareStructures(data, s, verbose = TRUE, iterations = 4)
r$networks
plot(r$runs[[2]],type="l")
points(data)
if(class(data)=="matrix"){
obs <- data
data <- list("obs"=obs, "noise"="?")
}
points(data)
points.Sim_data(data)
r$runs[[2]]$residual_SD
r$runs[[2]]$parms0
r$runs[[2]]$iterations
r$runs[[2]]$differentSolutions
r$runs[[2]]$numberOptimalSolutions
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
compareStructures <- function(data, structures, verbose=FALSE, iterations = 1){
if(class(data)=="matrix"){
obs <- data
data <- list("obs"=obs, "noise"="?")
}
# error check that data is in right format. Convert to right format
result <- list()
for(i in 1:nrow(structures$lb)){
best <- list()
ssrs <- c()
for(j in 1:iterations){
nlr <- list()
while(class(nlr)!="Inference_run"){
try(nlr <- gLVnonlinearRegression(data = data ,method = "Marq",parms0 = runif(n = ncol(data$obs[,-1])*(ncol(data$obs[,-1])+1), min = structures$lb[i,], max = structures$ub[i,]),  lowerbound = structures$lb[i,], upperbound = structures$ub[i,]),silent = T)
}
best[[j]] <- nlr
ssrs[j] <- nlr$SSR
}
ssrs <- round(ssrs,3)
differentSolutions <- length(unique(ssrs))
numberOptimalSolution <- sum(ssrs == min(ssrs))
nlr <- best[[min(which(ssrs == min(ssrs)))]]
nlr$iterations <- iterations
nlr$differentSolutions <- differentSolutions
nlr$numberOptimalSolutions <- numberOptimalSolution
if(nlr$message != "Solution of model failed. Overshot"){
result[[i]] <- nlr
}
if(verbose){print(i)}
}
#--------------------------------------------
if(!is.null(data$Parms)){
# if in silico data, convert to structure
structure <- c(sign(data$Parms))
structure[structure %in% 1] <- "+"
structure[structure %in% -1] <- "-"
structure <- paste0(structure, collapse = "")
}else{
# else:
structure = "Unknown"
}
ssr <- matrix(nrow = (length(result)+1), ncol = 4)
for(i in 1:(nrow(ssr)-1)){
ssr[i,1] <- i
ssr[i,2] <- paste0(structures$bounds[i,],collapse = "")
try(ssr[i,3] <- round(result[[i]]$SSR,3), silent = T)
ssr[i,4] <- round(sd(result[[i]]$Fit$residuals),3)
}
ssr[nrow(ssr),1:4] <- c("Original", 0 , structure, data$noise)
result_final <- as.data.frame(ssr[order(as.numeric(ssr[,2])),])
colnames(result_final) <- c("Index", "SSR","Network","SD")
return(list("networks"=result_final,"runs"=result))
}
library(gLVInterNetworks)
data("comparisonAllStructuresData1")
data("comparisonTwoStructuresData1")
comparisonAllStructuresData1
comparisonAllStructuresData1$networks
ssr <- comparisonAllStructuresData1$networks[,"SSR"]
net <- comparisonAllStructuresData1$networks[,"Network"]
comparisonAllStructuresData1 <- cbind(comparisonAllStructuresData1$networks[,"Index"], net, ssr, comparisonAllStructuresData1$networks[,"SD"])
comparisonAllStructuresData1
data("comparisonAllStructuresData1")
comparisonAllStructuresData1 <- cbind(comparisonAllStructuresData1$networks[,"Index"], comparisonAllStructuresData1$networks[,"Network"], comparisonAllStructuresData1$networks[,"SSR"], comparisonAllStructuresData1$networks[,"SD"])
comparisonAllStructuresData1
data("comparisonAllStructuresData1")
comparisonAllStructuresData1
comparisonAllStructuresData1$networks[,"Network"]
n <- as.character(comparisonAllStructuresData1$networks[,"Network"]
)
n
comparisonAllStructuresData1 <- cbind(comparisonAllStructuresData1$networks[,"Index"], n, comparisonAllStructuresData1$networks[,"SSR"], comparisonAllStructuresData1$networks[,"SD"])
comparisonAllStructuresData1
data("comparisonAllStructuresData1")
comparisonAllStructuresData1
n <- comparisonAllStructuresData1$networks
n
class(n)
n[,1]
n[,2]
n[,3]
n[,4]
x <- data.frame()
x[,1] <- n[,1]
x
n
n[c(1,3,2,4)]
comparisonAllStructuresData1$networks<- n[c(1,3,2,4)]
comparisonAllStructuresData1
comparisonAllStructuresData1$networks
getwd()
setwd("gLVInterNetworks/data")
save(comparisonAllStructuresData1, file = "comparisonAllStructuresData1.RData")
n <- comparisonTwoStructuresData1$networks
comparisonTwoStructuresData1$networks <- n[c(1,3,2,4)]
comparisonTwoStructuresData1$networks
save(comparisonTwoStructuresData1, file = "comparisonTwoStructuresData1.RData")
devtools::install_github("lkshrsch/gLVInterNetworks", build_vignettes = TRUE)
